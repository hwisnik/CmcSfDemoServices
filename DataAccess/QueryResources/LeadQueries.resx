<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GetLeadByCustomerGuid" xml:space="preserve">
    <value>SELECT [LeadGuid]
      ,[CustomerGuid]
      ,[SFLeadID]
      ,[LeadStatusGuid]
      ,[LeadSource]
      ,[QualifiedAuditTypeGuid]
      ,[QualifiedRate]
      ,[LeadStatusReason]
      ,[ReservedDate]
      ,[LeadStatusChangeDate]
  FROM [Customer].[Lead] cl
  WHERE cl.CustomerGuid = @customerGuid</value>
  </data>
  <data name="GetPhoneNumberByContactGuidQuery" xml:space="preserve">
    <value>select cp.Phone_Number from contact.phone cp
where cp.ContactGuid= @ContactGuid</value>
  </data>
  <data name="LiurpElectricAndGasAuditQuery" xml:space="preserve">
    <value>SELECT 
     CL.CustomerGuid
    ,CC.ContactGuid
    ,CC.FullName 
    ,cl.QualifiedRate
    ,CUS.Rate 
    ,CUS.AverageUsage 
    ,CUS.HeatingAverageUsage 
    ,CA.Latitude 
    ,CA.Longitude 
    ,CONCAT(CA.StreetAddress1, ' ', CA.StreetAddress2, ' ', CA.City + ', ', CA.State, ' ', CA.Zip)  Address 
    ,CL.SfLeadId 
    ,LRC.CapTier
    ,CL.LeadStatusGuid
    ,Cl.LeadStatusReason
    ,CL.ReservedDate
    ,CL.NextAvailableCallDate
   ,CL.LeadStatusChangeDate

FROM [Customer].[Lead] CL 
INNER JOIN[Contact].[Contact] CC ON CC.CustomerGuid = CL.CustomerGuid 
INNER JOIN[Customer].[Address] CA ON CA.CustomerGuid = CL.CustomerGuid 
INNER JOIN [Customer].[Customer] CUU ON CUU.CustomerGuid = CL.CustomerGuid
INNER JOIN [UsageRaw].[LkpRateCodes] LRC on LRC.RateCode = cl.QualifiedRate
INNER JOIN [Customer].[Usage] CUS on CUS.CustomerGuid = CL.CustomerGuid

WHERE 
    1=1 
    AND CL.QualifiedAuditTypeGuid = @QualifiedAuditTypeGuid      
    AND CUS.Rate = CL.QualifiedRate
    AND CC.ContactTypeGuid = 'BEF01936-5D80-471D-AF77-4CC2AE5161B4'  --Primary
    AND CA.AddressTypeGuid = '32463191-A534-45B6-9EBA-06E53B1E9A7E'  --Service
    AND Ca.AddressSource = 'Program'
    AND CC.IsAnyContactAllowed = 1 AND CC.IsVoiceContactAllowed = 1 
    AND CA.Latitude IS NOT NULL 
    AND CA.Longitude IS NOT NULL
    AND (CA.LastServiceDate IS NULL or DATEDIFF(day, CA.LastServiceDate,GETDATE()) &gt;= 730)  
    AND SYSDATETIME() &gt; cl.ReservedDate
    AND cl.LeadStatusChangeDate != convert(date,GETDATE()) 

    AND CL.LeadStatusGuid != 'DA54450E-7054-489B-9157-3DC20CC65B7B'      --Disqualified
    AND CL.LeadStatusGuid != 'D7D92E0B-6E69-4072-9ED2-D4F3F4DCDC09'     --Need Landlord Contact
    AND CL.LeadStatusGuid != 'F46D3F98-438C-4EFF-A3CD-32C15F87390B'        --Refused
    AND CL.LeadStatusGuid != '9993CA48-467D-42FA-AF02-9F9A34574860'        --Converted last is Attempt Limit Exceeded, don't add comment to next line we append another and clause dynamically
    AND CL.LeadStatusGuid != 'CEC183D9-22D6-409D-8D89-C3845E42A9EF'      
    </value>
  </data>
  <data name="LiurpGasHeatingOnlyQuery" xml:space="preserve">
    <value>SELECT TOP {input.NumberOfLeadsToQuery.ToString()} CL.CustomerGuid 
    , CC.FullName 
    ,CoP.Phone_Number PhoneNumber 
	,cl.QualifiedRate
    , CU.Rate 
    ,CU.AverageUsage 
    ,CU.HeatingAverageUsage 
    ,CA.Latitude 
    ,CA.Longitude 
    ,CONCAT(CA.StreetAddress1, ' ', CA.StreetAddress2, ' ', CA.City + ', ', CA.State, ' ', CA.Zip)  Address 
    ,CL.SfLeadId 
    ,CU.CapTier CapStatus
FROM [Customer].[Lead] CL 
INNER JOIN[Contact].[Contact] CC ON CC.CustomerGuid = CL.CustomerGuid 
INNER JOIN[Customer].[Address] CA ON CA.CustomerGuid = CL.CustomerGuid 
INNER JOIN [Customer].[Customer] CUU ON CUU.CustomerGuid = CL.CustomerGuid  
CROSS APPLY(SELECT TOP 1 CU.Rate, CU.AverageUsage, CU.HeatingAverageUsage, lrc.CapTier FROM [Customer].[Usage] CU 
     INNER JOIN [UsageRaw].[LkpRateCodes] LRC ON LRC.RateCode = CU.Rate 
     AND LRC.ProgramGuid = CUU.ProgramGuid
	AND LRC.BaseRate in ('G','H')
	AND LRC.ProgramGuid = '8CC20C6D-13C2-424B-9EB3-194F653CC778' 
    WHERE CU.CustomerGuid = CL.CustomerGuid) CU 
CROSS APPLY(SELECT TOP 1 CoP.Phone_Number FROM [Contact].[Phone] CoP 
    WHERE CoP.ContactGuid = CC.ContactGuid AND CoP.Phone_Number != '9999999999') CoP 
    OUTER APPLY (Select max (aud.LastModifiedDate) lastModifiedDate FROM [CDCQueue].[AuditLog] aud 
    WHERE aud.ObjectType = 'Shared.Entities.DTO.Customer.Lead' and aud.RecordID = cl.SFLeadID) aud 
WHERE CL.LeadStatusGuid IN('F06163CC-8196-482C-99DF-0D46185CA0F0','46AB1284-1228-4B12-87AB-776FB7C1583E') 
AND CC.ContactTypeGuid = 'BEF01936-5D80-471D-AF77-4CC2AE5161B4' 
AND CA.AddressTypeGuid = '32463191-A534-45B6-9EBA-06E53B1E9A7E' 
AND CC.IsAnyContactAllowed = 1 AND CC.IsVoiceContactAllowed = 1 
AND CL.LeadStatusGuid IN ('46AB1284-1228-4B12-87AB-776FB7C1583E', 'F06163CC-8196-482C-99DF-0D46185CA0F0') 
AND CA.Latitude IS NOT NULL 
AND CA.Longitude IS NOT NULL 
AND cl.ReservedDate != convert(date,GETDATE()) 
AND (aud.lastModifiedDate IS NULL or DATEDIFF(day, aud.lastModifiedDate, GETDATE()) != 0) 
AND CL.QualifiedAuditTypeGuid = '{input.WorkType}'  
AND CU.HeatingAverageUsage &gt;= 150</value>
    <comment>This query can be swapped for the combined Electric and Gas Heating query depending on program needs.</comment>
  </data>
</root>